// <auto-generated />
using System;
using AuthPermissions.BaseCode.DataLayer.EfCode;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomDatabase2.SqliteCustomParts.Sharding.Migrations
{
    [DbContext(typeof(AuthPermissionsDbContext))]
    partial class AuthPermissionsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("authp")
                .HasAnnotation("ProductVersion", "6.0.16");

            modelBuilder.Entity("AuthPermissions.BaseCode.DataLayer.Classes.AuthUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AuthUsers", "authp");
                });

            modelBuilder.Entity("AuthPermissions.BaseCode.DataLayer.Classes.RefreshToken", b =>
                {
                    b.Property<string>("TokenValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDateUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsInvalid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JwtId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("TokenValue");

                    b.HasIndex("AddedDateUtc")
                        .IsUnique();

                    b.ToTable("RefreshTokens", "authp");
                });

            modelBuilder.Entity("AuthPermissions.BaseCode.DataLayer.Classes.RoleToPermissions", b =>
                {
                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("PackedPermissionsInRole")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("RoleType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("RoleName");

                    b.HasIndex("RoleType");

                    b.ToTable("RoleToPermissions", "authp");
                });

            modelBuilder.Entity("AuthPermissions.BaseCode.DataLayer.Classes.Tenant", b =>
                {
                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DatabaseInfoName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasOwnDb")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHierarchical")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParentDataKey")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentTenantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TenantFullName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("TenantId");

                    b.HasIndex("ParentDataKey");

                    b.HasIndex("ParentTenantId");

                    b.HasIndex("TenantFullName")
                        .IsUnique();

                    b.ToTable("Tenants", "authp");
                });

            modelBuilder.Entity("AuthPermissions.BaseCode.DataLayer.Classes.UserToRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("UserId", "RoleName");

                    b.HasIndex("RoleName");

                    b.ToTable("UserToRoles", "authp");
                });

            modelBuilder.Entity("RoleToPermissionsTenant", b =>
                {
                    b.Property<string>("TenantRolesRoleName")
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantsTenantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("TenantRolesRoleName", "TenantsTenantId");

                    b.HasIndex("TenantsTenantId");

                    b.ToTable("RoleToPermissionsTenant", "authp");
                });

            modelBuilder.Entity("AuthPermissions.BaseCode.DataLayer.Classes.AuthUser", b =>
                {
                    b.HasOne("AuthPermissions.BaseCode.DataLayer.Classes.Tenant", "UserTenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("UserTenant");
                });

            modelBuilder.Entity("AuthPermissions.BaseCode.DataLayer.Classes.Tenant", b =>
                {
                    b.HasOne("AuthPermissions.BaseCode.DataLayer.Classes.Tenant", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentTenantId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AuthPermissions.BaseCode.DataLayer.Classes.UserToRole", b =>
                {
                    b.HasOne("AuthPermissions.BaseCode.DataLayer.Classes.RoleToPermissions", "Role")
                        .WithMany()
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthPermissions.BaseCode.DataLayer.Classes.AuthUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RoleToPermissionsTenant", b =>
                {
                    b.HasOne("AuthPermissions.BaseCode.DataLayer.Classes.RoleToPermissions", null)
                        .WithMany()
                        .HasForeignKey("TenantRolesRoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthPermissions.BaseCode.DataLayer.Classes.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantsTenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthPermissions.BaseCode.DataLayer.Classes.AuthUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AuthPermissions.BaseCode.DataLayer.Classes.Tenant", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
